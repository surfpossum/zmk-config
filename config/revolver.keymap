// based on https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/cradio/cradio.keymap
// and https://github.com/christianselig/caldera-keyboard/blob/main/zmk-config-caldera/config/caldera.keymap

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NUMLAYER 1
#define nk0 0
#define nk1 1
#define nk2 2
#define nk3 3
#define nk4 6
#define nk5 7

#define SYMLAYER 2


#define FUNCLAYER 3

#define kO 0
#define kA 1
#define kT 2
#define kE 3
#define lm1 4
#define lm2 5
#define kN 6
#define kR 7
#define kI 8
#define kS 9
#define rm1 11
#define rm2 10
#define CAD_ESC      &mt LC(LA(DEL)) ESC      //hold: control alt delete | tap: escape
#define AS(keycode) &as LS(keycode) keycode

// | SW00 | SW01 | SW02 | SW03 | | SW06 | SW07 | SW08 | SW09 |
// | SW04 | SW05 |                             | SW10 | SW11 |
//  ---------------------------------------------------------
// | O    | A    | T    | E    | | N    | R    | I    | S    |
// | SPC  | TAB  |                             | RET  | BSPC |

/ {
    combos {
        compatible = "zmk,combos";
				combo_h { timeout-ms = <50>; key-positions = <kE kN>; bindings = <AS(H)>; };
				combo_d { timeout-ms = <50>; key-positions = <kT kN>; bindings = <AS(D)>; };
				combo_l { timeout-ms = <50>; key-positions = <kA kN>; bindings = <AS(L)>; };
				combo_f { timeout-ms = <50>; key-positions = <kE kR>; bindings = <AS(F)>; };
				combo_c { timeout-ms = <50>; key-positions = <kE kI>; bindings = <AS(C)>; };
				combo_m { timeout-ms = <50>; key-positions = <kT kR>; bindings = <AS(M)>; };
				combo_u { timeout-ms = <50>; key-positions = <kA kR>; bindings = <AS(U)>; };
				combo_g { timeout-ms = <50>; key-positions = <kT kI>; bindings = <AS(G)>; };
				combo_y { timeout-ms = <50>; key-positions = <kA kS>; bindings = <AS(Y)>; };
				combo_p { timeout-ms = <50>; key-positions = <kN kR>; bindings = <AS(P)>; };
				combo_w { timeout-ms = <50>; key-positions = <kT kE>; bindings = <AS(W)>; };
				combo_b { timeout-ms = <50>; key-positions = <kR kI>; bindings = <AS(B)>; };
				combo_v { timeout-ms = <50>; key-positions = <kA kT>; bindings = <AS(V)>; };
				combo_k { timeout-ms = <50>; key-positions = <kN kI>; bindings = <AS(K)>; };
				combo_j { timeout-ms = <50>; key-positions = <kA kE>; bindings = <AS(J)>; };
				combo_x { timeout-ms = <50>; key-positions = <kR kS>; bindings = <AS(X)>; };
				combo_z { timeout-ms = <50>; key-positions = <kO kT>; bindings = <AS(Z)>; };
				combo_q { timeout-ms = <50>; key-positions = <kO kS>; bindings = <AS(Q)>; };
				
				combo_space_dot { timeout-ms = <50>; key-positions = <kI kS>; bindings = <&mt SPACE DOT>; };
				combo_comma { timeout-ms = <50>; key-positions = <kO kA>; bindings = <&kp COMMA>; };
				combo_qmark { timeout-ms = <50>; key-positions = <kN kS>; bindings = <&kp QMARK>; };
				combo_excl { timeout-ms = <50>; key-positions = <kO kE>; bindings = <&kp EXCL>; };
				combo_sqt { timeout-ms = <50>; key-positions = <kO kA kN>; bindings = <&kp SQT>; };
				
				combo_numLayer { timeout-ms = <50>; key-positions = <rm2>; bindings = <&mo NUMLAYER>; };
				combo_n6 { timeout-ms = <50>; key-positions = <nk1 nk5>; bindings = <&mt N6 CARET>; };
				combo_n6b { timeout-ms = <50>; key-positions = <nk2 nk4>; bindings = <&mt N6 CARET>; };
				combo_n7 { timeout-ms = <50>; key-positions = <nk2 nk5>; bindings = <&mt N7 AMPS>; };
				combo_n7b { timeout-ms = <50>; key-positions = <nk3 nk4>; bindings = <&mt N7 AMPS>; };
				combo_n8 { timeout-ms = <50>; key-positions = <nk3 nk5>; bindings = <&mt N8 STAR>; };
				combo_n9 { timeout-ms = <50>; key-positions = <nk4 nk5>; bindings = <&mt N9 LPAR>; };
				
				combo_symLayer { timeout-ms = <50>; key-positions = <rm1 rm2>; bindings = <&mo SYMLAYER>; };
				
				//combo_funcLayer { timeout-ms = <50>; key-positions = <rm1 rm2>; bindings = <&mo FUNCLAYER>; };
				
				combo_bluetoothSwitch { timeout-ms = <50>; key-positions = <rm1 lm1>; bindings = <&bt BT_NXT>; };
				
				//delete
				//arrow keys
				//brackets
				//slashes
				//colon
				//function
				//os
				//mods
    };
		
	behaviors {
		skq: sticky_key_quick_release {
			compatible = "zmk,behavior-sticky-key";
			#binding-cells = <1>;
			bindings = <&kp>;
			release-after-ms = <5000>;
			quick-release;
			lazy;
			ignore-modifiers;
		};
		as: auto_shift {
			compatible = "zmk,behavior-hold-tap";
			label = "AUTO_SHIFT";
			#binding-cells = <2>;
			tapping_term_ms = <135>;
			quick_tap_ms = <0>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
	};
	
	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
			AS(O)		AS(A)		AS(T)		AS(E)
			&kp SPACE 	AS(TAB)	
			AS(N)		AS(R)		AS(I)		AS(S)
			&kp RET		&kp BSPC 
			>;
		};

		number_layer {
			bindings = <
			&mt N1 EXCL		&mt N2 AT		&mt N3 HASH		&mt N4 DLLR
			&kp SPACE 	&kp TAB	
			&mt PRCT N5		&mt RPAR N0		&kp A		&kp B
			&kp N9		&none 
			>;
		};

		symbol_layer {
			bindings = <
			&mt N1 EXCL		&mt N2 AT		&mt N3 HASH		&mt N4 DLLR
			&kp SPACE 	&kp TAB	
			&mt PRCT N5		&mt RPAR N0		&kp A		&kp B
			&none		&none 
			>;
		};

		function_layer {
			bindings = <
			&mt N1 EXCL		&mt N2 AT		&mt N3 HASH		&mt N4 DLLR
			&kp SPACE 	&kp TAB	
			&mt N5 PRCT		&mt N0 RPAR		&kp A		&kp B
			&none		CAD_ESC
			>;
		};
	};
};
